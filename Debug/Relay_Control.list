
Relay_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a2c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001538  08002b38  08002b38  00003b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004070  08004070  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004070  08004070  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004070  08004070  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004070  08004070  00005070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004074  08004074  00005074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004078  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000000c  08004084  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08004084  0000635c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afc0  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cfb  00000000  00000000  00010ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00012cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000800  00000000  00000000  00013738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cc8  00000000  00000000  00013f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cfc1  00000000  00000000  0002ac00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084e07  00000000  00000000  00037bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc9c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a08  00000000  00000000  000bca0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000bf414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b20 	.word	0x08002b20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002b20 	.word	0x08002b20

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b08e      	sub	sp, #56	@ 0x38
 8000150:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	char myText[] = "Light controller";
 8000152:	4b36      	ldr	r3, [pc, #216]	@ (800022c <main+0xe0>)
 8000154:	f107 041c 	add.w	r4, r7, #28
 8000158:	461d      	mov	r5, r3
 800015a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800015c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800015e:	682b      	ldr	r3, [r5, #0]
 8000160:	7023      	strb	r3, [r4, #0]
	char lightOn[] = "Light on";
 8000162:	4a33      	ldr	r2, [pc, #204]	@ (8000230 <main+0xe4>)
 8000164:	f107 0310 	add.w	r3, r7, #16
 8000168:	ca07      	ldmia	r2, {r0, r1, r2}
 800016a:	c303      	stmia	r3!, {r0, r1}
 800016c:	701a      	strb	r2, [r3, #0]
	char lightOff[] = "Light off";
 800016e:	4a31      	ldr	r2, [pc, #196]	@ (8000234 <main+0xe8>)
 8000170:	1d3b      	adds	r3, r7, #4
 8000172:	ca07      	ldmia	r2, {r0, r1, r2}
 8000174:	c303      	stmia	r3!, {r0, r1}
 8000176:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000178:	f000 fd2a 	bl	8000bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017c:	f000 f866 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000180:	f000 f91e 	bl	80003c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000184:	f000 f8f6 	bl	8000374 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000188:	f000 f8ca 	bl	8000320 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800018c:	f000 f89a 	bl	80002c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000190:	f000 fb20 	bl	80007d4 <ssd1306_Init>
  ssd1306_SetCursor(0, 0);
 8000194:	2100      	movs	r1, #0
 8000196:	2000      	movs	r0, #0
 8000198:	f000 fcd0 	bl	8000b3c <ssd1306_SetCursor>
  ssd1306_WriteString(myText, Font_7x10, White);
 800019c:	4b26      	ldr	r3, [pc, #152]	@ (8000238 <main+0xec>)
 800019e:	f107 001c 	add.w	r0, r7, #28
 80001a2:	2201      	movs	r2, #1
 80001a4:	9200      	str	r2, [sp, #0]
 80001a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80001a8:	f000 fca2 	bl	8000af0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80001ac:	f000 fb94 	bl	80008d8 <ssd1306_UpdateScreen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (HAL_UART_Receive(&huart1, &rx_data, 1, HAL_MAX_DELAY) == HAL_OK)
 80001b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80001b4:	2201      	movs	r2, #1
 80001b6:	4921      	ldr	r1, [pc, #132]	@ (800023c <main+0xf0>)
 80001b8:	4821      	ldr	r0, [pc, #132]	@ (8000240 <main+0xf4>)
 80001ba:	f002 faa5 	bl	8002708 <HAL_UART_Receive>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d1f5      	bne.n	80001b0 <main+0x64>
	  	  {
			if (rx_data == '1') // Turn relay/Toggle light
 80001c4:	4b1d      	ldr	r3, [pc, #116]	@ (800023c <main+0xf0>)
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	2b31      	cmp	r3, #49	@ 0x31
 80001ca:	d114      	bne.n	80001f6 <main+0xaa>
			{
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80001cc:	2201      	movs	r2, #1
 80001ce:	2102      	movs	r1, #2
 80001d0:	481c      	ldr	r0, [pc, #112]	@ (8000244 <main+0xf8>)
 80001d2:	f001 f975 	bl	80014c0 <HAL_GPIO_WritePin>
			  ssd1306_Init();
 80001d6:	f000 fafd 	bl	80007d4 <ssd1306_Init>
			  ssd1306_SetCursor(0, 0);
 80001da:	2100      	movs	r1, #0
 80001dc:	2000      	movs	r0, #0
 80001de:	f000 fcad 	bl	8000b3c <ssd1306_SetCursor>
			  ssd1306_WriteString(lightOff, Font_11x18, White);
 80001e2:	4b19      	ldr	r3, [pc, #100]	@ (8000248 <main+0xfc>)
 80001e4:	1d38      	adds	r0, r7, #4
 80001e6:	2201      	movs	r2, #1
 80001e8:	9200      	str	r2, [sp, #0]
 80001ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80001ec:	f000 fc80 	bl	8000af0 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 80001f0:	f000 fb72 	bl	80008d8 <ssd1306_UpdateScreen>
 80001f4:	e7dc      	b.n	80001b0 <main+0x64>
//			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Helps me confirm Bluetooth module and STM32 Board are talking
			}
			else if (rx_data == '0') // Turn relay/Toggle light
 80001f6:	4b11      	ldr	r3, [pc, #68]	@ (800023c <main+0xf0>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	2b30      	cmp	r3, #48	@ 0x30
 80001fc:	d1d8      	bne.n	80001b0 <main+0x64>
			{
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80001fe:	2200      	movs	r2, #0
 8000200:	2102      	movs	r1, #2
 8000202:	4810      	ldr	r0, [pc, #64]	@ (8000244 <main+0xf8>)
 8000204:	f001 f95c 	bl	80014c0 <HAL_GPIO_WritePin>
			  ssd1306_Init();
 8000208:	f000 fae4 	bl	80007d4 <ssd1306_Init>
			  ssd1306_SetCursor(0, 0);
 800020c:	2100      	movs	r1, #0
 800020e:	2000      	movs	r0, #0
 8000210:	f000 fc94 	bl	8000b3c <ssd1306_SetCursor>
			  ssd1306_WriteString(lightOn, Font_11x18, White);
 8000214:	4b0c      	ldr	r3, [pc, #48]	@ (8000248 <main+0xfc>)
 8000216:	f107 0010 	add.w	r0, r7, #16
 800021a:	2201      	movs	r2, #1
 800021c:	9200      	str	r2, [sp, #0]
 800021e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000220:	f000 fc66 	bl	8000af0 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 8000224:	f000 fb58 	bl	80008d8 <ssd1306_UpdateScreen>
	  if (HAL_UART_Receive(&huart1, &rx_data, 1, HAL_MAX_DELAY) == HAL_OK)
 8000228:	e7c2      	b.n	80001b0 <main+0x64>
 800022a:	bf00      	nop
 800022c:	08002b38 	.word	0x08002b38
 8000230:	08002b4c 	.word	0x08002b4c
 8000234:	08002b58 	.word	0x08002b58
 8000238:	08004044 	.word	0x08004044
 800023c:	2000014c 	.word	0x2000014c
 8000240:	2000007c 	.word	0x2000007c
 8000244:	40010800 	.word	0x40010800
 8000248:	08004050 	.word	0x08004050

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b090      	sub	sp, #64	@ 0x40
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	2228      	movs	r2, #40	@ 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f002 fc34 	bl	8002ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026e:	2302      	movs	r3, #2
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000272:	2301      	movs	r3, #1
 8000274:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000276:	2310      	movs	r3, #16
 8000278:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027a:	2300      	movs	r3, #0
 800027c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	4618      	mov	r0, r3
 8000284:	f001 fde0 	bl	8001e48 <HAL_RCC_OscConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800028e:	f000 f8d5 	bl	800043c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000292:	230f      	movs	r3, #15
 8000294:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000296:	2300      	movs	r3, #0
 8000298:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 f84e 	bl	800234c <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002b6:	f000 f8c1 	bl	800043c <Error_Handler>
  }
}
 80002ba:	bf00      	nop
 80002bc:	3740      	adds	r7, #64	@ 0x40
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002c8:	4b12      	ldr	r3, [pc, #72]	@ (8000314 <MX_I2C1_Init+0x50>)
 80002ca:	4a13      	ldr	r2, [pc, #76]	@ (8000318 <MX_I2C1_Init+0x54>)
 80002cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002ce:	4b11      	ldr	r3, [pc, #68]	@ (8000314 <MX_I2C1_Init+0x50>)
 80002d0:	4a12      	ldr	r2, [pc, #72]	@ (800031c <MX_I2C1_Init+0x58>)
 80002d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000314 <MX_I2C1_Init+0x50>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002da:	4b0e      	ldr	r3, [pc, #56]	@ (8000314 <MX_I2C1_Init+0x50>)
 80002dc:	2200      	movs	r2, #0
 80002de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000314 <MX_I2C1_Init+0x50>)
 80002e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000314 <MX_I2C1_Init+0x50>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002ee:	4b09      	ldr	r3, [pc, #36]	@ (8000314 <MX_I2C1_Init+0x50>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f4:	4b07      	ldr	r3, [pc, #28]	@ (8000314 <MX_I2C1_Init+0x50>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002fa:	4b06      	ldr	r3, [pc, #24]	@ (8000314 <MX_I2C1_Init+0x50>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000300:	4804      	ldr	r0, [pc, #16]	@ (8000314 <MX_I2C1_Init+0x50>)
 8000302:	f001 f8f5 	bl	80014f0 <HAL_I2C_Init>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800030c:	f000 f896 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000028 	.word	0x20000028
 8000318:	40005400 	.word	0x40005400
 800031c:	000186a0 	.word	0x000186a0

08000320 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000324:	4b11      	ldr	r3, [pc, #68]	@ (800036c <MX_USART1_UART_Init+0x4c>)
 8000326:	4a12      	ldr	r2, [pc, #72]	@ (8000370 <MX_USART1_UART_Init+0x50>)
 8000328:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800032a:	4b10      	ldr	r3, [pc, #64]	@ (800036c <MX_USART1_UART_Init+0x4c>)
 800032c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000330:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000332:	4b0e      	ldr	r3, [pc, #56]	@ (800036c <MX_USART1_UART_Init+0x4c>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000338:	4b0c      	ldr	r3, [pc, #48]	@ (800036c <MX_USART1_UART_Init+0x4c>)
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800033e:	4b0b      	ldr	r3, [pc, #44]	@ (800036c <MX_USART1_UART_Init+0x4c>)
 8000340:	2200      	movs	r2, #0
 8000342:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000344:	4b09      	ldr	r3, [pc, #36]	@ (800036c <MX_USART1_UART_Init+0x4c>)
 8000346:	220c      	movs	r2, #12
 8000348:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034a:	4b08      	ldr	r3, [pc, #32]	@ (800036c <MX_USART1_UART_Init+0x4c>)
 800034c:	2200      	movs	r2, #0
 800034e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000350:	4b06      	ldr	r3, [pc, #24]	@ (800036c <MX_USART1_UART_Init+0x4c>)
 8000352:	2200      	movs	r2, #0
 8000354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000356:	4805      	ldr	r0, [pc, #20]	@ (800036c <MX_USART1_UART_Init+0x4c>)
 8000358:	f002 f986 	bl	8002668 <HAL_UART_Init>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000362:	f000 f86b 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	2000007c 	.word	0x2000007c
 8000370:	40013800 	.word	0x40013800

08000374 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800037a:	4b10      	ldr	r3, [pc, #64]	@ (80003bc <MX_DMA_Init+0x48>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	4a0f      	ldr	r2, [pc, #60]	@ (80003bc <MX_DMA_Init+0x48>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	6153      	str	r3, [r2, #20]
 8000386:	4b0d      	ldr	r3, [pc, #52]	@ (80003bc <MX_DMA_Init+0x48>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000392:	2200      	movs	r2, #0
 8000394:	2100      	movs	r1, #0
 8000396:	200e      	movs	r0, #14
 8000398:	f000 fd77 	bl	8000e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800039c:	200e      	movs	r0, #14
 800039e:	f000 fd90 	bl	8000ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2100      	movs	r1, #0
 80003a6:	200f      	movs	r0, #15
 80003a8:	f000 fd6f 	bl	8000e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80003ac:	200f      	movs	r0, #15
 80003ae:	f000 fd88 	bl	8000ec2 <HAL_NVIC_EnableIRQ>

}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 0308 	add.w	r3, r7, #8
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d4:	4b17      	ldr	r3, [pc, #92]	@ (8000434 <MX_GPIO_Init+0x74>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a16      	ldr	r2, [pc, #88]	@ (8000434 <MX_GPIO_Init+0x74>)
 80003da:	f043 0304 	orr.w	r3, r3, #4
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b14      	ldr	r3, [pc, #80]	@ (8000434 <MX_GPIO_Init+0x74>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0304 	and.w	r3, r3, #4
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ec:	4b11      	ldr	r3, [pc, #68]	@ (8000434 <MX_GPIO_Init+0x74>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a10      	ldr	r2, [pc, #64]	@ (8000434 <MX_GPIO_Init+0x74>)
 80003f2:	f043 0308 	orr.w	r3, r3, #8
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000434 <MX_GPIO_Init+0x74>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0308 	and.w	r3, r3, #8
 8000400:	603b      	str	r3, [r7, #0]
 8000402:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	2122      	movs	r1, #34	@ 0x22
 8000408:	480b      	ldr	r0, [pc, #44]	@ (8000438 <MX_GPIO_Init+0x78>)
 800040a:	f001 f859 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800040e:	2322      	movs	r3, #34	@ 0x22
 8000410:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000412:	2301      	movs	r3, #1
 8000414:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	2300      	movs	r3, #0
 8000418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041a:	2302      	movs	r3, #2
 800041c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041e:	f107 0308 	add.w	r3, r7, #8
 8000422:	4619      	mov	r1, r3
 8000424:	4804      	ldr	r0, [pc, #16]	@ (8000438 <MX_GPIO_Init+0x78>)
 8000426:	f000 fec7 	bl	80011b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800042a:	bf00      	nop
 800042c:	3718      	adds	r7, #24
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40021000 	.word	0x40021000
 8000438:	40010800 	.word	0x40010800

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
}
 8000442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000444:	bf00      	nop
 8000446:	e7fd      	b.n	8000444 <Error_Handler+0x8>

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800044e:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <HAL_MspInit+0x5c>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a14      	ldr	r2, [pc, #80]	@ (80004a4 <HAL_MspInit+0x5c>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6193      	str	r3, [r2, #24]
 800045a:	4b12      	ldr	r3, [pc, #72]	@ (80004a4 <HAL_MspInit+0x5c>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <HAL_MspInit+0x5c>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a0e      	ldr	r2, [pc, #56]	@ (80004a4 <HAL_MspInit+0x5c>)
 800046c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <HAL_MspInit+0x5c>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800047e:	4b0a      	ldr	r3, [pc, #40]	@ (80004a8 <HAL_MspInit+0x60>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	4a04      	ldr	r2, [pc, #16]	@ (80004a8 <HAL_MspInit+0x60>)
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010000 	.word	0x40010000

080004ac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b08a      	sub	sp, #40	@ 0x28
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b4:	f107 0314 	add.w	r3, r7, #20
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a1d      	ldr	r2, [pc, #116]	@ (800053c <HAL_I2C_MspInit+0x90>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d132      	bne.n	8000532 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000540 <HAL_I2C_MspInit+0x94>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000540 <HAL_I2C_MspInit+0x94>)
 80004d2:	f043 0308 	orr.w	r3, r3, #8
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b19      	ldr	r3, [pc, #100]	@ (8000540 <HAL_I2C_MspInit+0x94>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0308 	and.w	r3, r3, #8
 80004e0:	613b      	str	r3, [r7, #16]
 80004e2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80004e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80004e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004ea:	2312      	movs	r3, #18
 80004ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ee:	2303      	movs	r3, #3
 80004f0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	4619      	mov	r1, r3
 80004f8:	4812      	ldr	r0, [pc, #72]	@ (8000544 <HAL_I2C_MspInit+0x98>)
 80004fa:	f000 fe5d 	bl	80011b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80004fe:	4b12      	ldr	r3, [pc, #72]	@ (8000548 <HAL_I2C_MspInit+0x9c>)
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	627b      	str	r3, [r7, #36]	@ 0x24
 8000504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000506:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800050a:	627b      	str	r3, [r7, #36]	@ 0x24
 800050c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800050e:	f043 0302 	orr.w	r3, r3, #2
 8000512:	627b      	str	r3, [r7, #36]	@ 0x24
 8000514:	4a0c      	ldr	r2, [pc, #48]	@ (8000548 <HAL_I2C_MspInit+0x9c>)
 8000516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000518:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800051a:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <HAL_I2C_MspInit+0x94>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	4a08      	ldr	r2, [pc, #32]	@ (8000540 <HAL_I2C_MspInit+0x94>)
 8000520:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000524:	61d3      	str	r3, [r2, #28]
 8000526:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <HAL_I2C_MspInit+0x94>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000532:	bf00      	nop
 8000534:	3728      	adds	r7, #40	@ 0x28
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40005400 	.word	0x40005400
 8000540:	40021000 	.word	0x40021000
 8000544:	40010c00 	.word	0x40010c00
 8000548:	40010000 	.word	0x40010000

0800054c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a42      	ldr	r2, [pc, #264]	@ (8000670 <HAL_UART_MspInit+0x124>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d17d      	bne.n	8000668 <HAL_UART_MspInit+0x11c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800056c:	4b41      	ldr	r3, [pc, #260]	@ (8000674 <HAL_UART_MspInit+0x128>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a40      	ldr	r2, [pc, #256]	@ (8000674 <HAL_UART_MspInit+0x128>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b3e      	ldr	r3, [pc, #248]	@ (8000674 <HAL_UART_MspInit+0x128>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000584:	4b3b      	ldr	r3, [pc, #236]	@ (8000674 <HAL_UART_MspInit+0x128>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a3a      	ldr	r2, [pc, #232]	@ (8000674 <HAL_UART_MspInit+0x128>)
 800058a:	f043 0304 	orr.w	r3, r3, #4
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b38      	ldr	r3, [pc, #224]	@ (8000674 <HAL_UART_MspInit+0x128>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0304 	and.w	r3, r3, #4
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800059c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a2:	2302      	movs	r3, #2
 80005a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a6:	2303      	movs	r3, #3
 80005a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	4619      	mov	r1, r3
 80005b0:	4831      	ldr	r0, [pc, #196]	@ (8000678 <HAL_UART_MspInit+0x12c>)
 80005b2:	f000 fe01 	bl	80011b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	f107 0310 	add.w	r3, r7, #16
 80005c8:	4619      	mov	r1, r3
 80005ca:	482b      	ldr	r0, [pc, #172]	@ (8000678 <HAL_UART_MspInit+0x12c>)
 80005cc:	f000 fdf4 	bl	80011b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80005d0:	4b2a      	ldr	r3, [pc, #168]	@ (800067c <HAL_UART_MspInit+0x130>)
 80005d2:	4a2b      	ldr	r2, [pc, #172]	@ (8000680 <HAL_UART_MspInit+0x134>)
 80005d4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005d6:	4b29      	ldr	r3, [pc, #164]	@ (800067c <HAL_UART_MspInit+0x130>)
 80005d8:	2200      	movs	r2, #0
 80005da:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005dc:	4b27      	ldr	r3, [pc, #156]	@ (800067c <HAL_UART_MspInit+0x130>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005e2:	4b26      	ldr	r3, [pc, #152]	@ (800067c <HAL_UART_MspInit+0x130>)
 80005e4:	2280      	movs	r2, #128	@ 0x80
 80005e6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005e8:	4b24      	ldr	r3, [pc, #144]	@ (800067c <HAL_UART_MspInit+0x130>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005ee:	4b23      	ldr	r3, [pc, #140]	@ (800067c <HAL_UART_MspInit+0x130>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80005f4:	4b21      	ldr	r3, [pc, #132]	@ (800067c <HAL_UART_MspInit+0x130>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005fa:	4b20      	ldr	r3, [pc, #128]	@ (800067c <HAL_UART_MspInit+0x130>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000600:	481e      	ldr	r0, [pc, #120]	@ (800067c <HAL_UART_MspInit+0x130>)
 8000602:	f000 fc79 	bl	8000ef8 <HAL_DMA_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 800060c:	f7ff ff16 	bl	800043c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a1a      	ldr	r2, [pc, #104]	@ (800067c <HAL_UART_MspInit+0x130>)
 8000614:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000616:	4a19      	ldr	r2, [pc, #100]	@ (800067c <HAL_UART_MspInit+0x130>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800061c:	4b19      	ldr	r3, [pc, #100]	@ (8000684 <HAL_UART_MspInit+0x138>)
 800061e:	4a1a      	ldr	r2, [pc, #104]	@ (8000688 <HAL_UART_MspInit+0x13c>)
 8000620:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000622:	4b18      	ldr	r3, [pc, #96]	@ (8000684 <HAL_UART_MspInit+0x138>)
 8000624:	2210      	movs	r2, #16
 8000626:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000628:	4b16      	ldr	r3, [pc, #88]	@ (8000684 <HAL_UART_MspInit+0x138>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800062e:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <HAL_UART_MspInit+0x138>)
 8000630:	2280      	movs	r2, #128	@ 0x80
 8000632:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000634:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <HAL_UART_MspInit+0x138>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <HAL_UART_MspInit+0x138>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000640:	4b10      	ldr	r3, [pc, #64]	@ (8000684 <HAL_UART_MspInit+0x138>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <HAL_UART_MspInit+0x138>)
 8000648:	2200      	movs	r2, #0
 800064a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800064c:	480d      	ldr	r0, [pc, #52]	@ (8000684 <HAL_UART_MspInit+0x138>)
 800064e:	f000 fc53 	bl	8000ef8 <HAL_DMA_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000658:	f7ff fef0 	bl	800043c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a09      	ldr	r2, [pc, #36]	@ (8000684 <HAL_UART_MspInit+0x138>)
 8000660:	639a      	str	r2, [r3, #56]	@ 0x38
 8000662:	4a08      	ldr	r2, [pc, #32]	@ (8000684 <HAL_UART_MspInit+0x138>)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000668:	bf00      	nop
 800066a:	3720      	adds	r7, #32
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40013800 	.word	0x40013800
 8000674:	40021000 	.word	0x40021000
 8000678:	40010800 	.word	0x40010800
 800067c:	200000c4 	.word	0x200000c4
 8000680:	40020058 	.word	0x40020058
 8000684:	20000108 	.word	0x20000108
 8000688:	40020044 	.word	0x40020044

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <NMI_Handler+0x4>

08000694 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <HardFault_Handler+0x4>

0800069c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <MemManage_Handler+0x4>

080006a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <BusFault_Handler+0x4>

080006ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <UsageFault_Handler+0x4>

080006b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006dc:	f000 fabe 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80006e8:	4802      	ldr	r0, [pc, #8]	@ (80006f4 <DMA1_Channel4_IRQHandler+0x10>)
 80006ea:	f000 fc5f 	bl	8000fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000108 	.word	0x20000108

080006f8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80006fc:	4802      	ldr	r0, [pc, #8]	@ (8000708 <DMA1_Channel5_IRQHandler+0x10>)
 80006fe:	f000 fc55 	bl	8000fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200000c4 	.word	0x200000c4

0800070c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000718:	f7ff fff8 	bl	800070c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800071c:	480b      	ldr	r0, [pc, #44]	@ (800074c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800071e:	490c      	ldr	r1, [pc, #48]	@ (8000750 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000720:	4a0c      	ldr	r2, [pc, #48]	@ (8000754 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000724:	e002      	b.n	800072c <LoopCopyDataInit>

08000726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072a:	3304      	adds	r3, #4

0800072c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800072c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000730:	d3f9      	bcc.n	8000726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000732:	4a09      	ldr	r2, [pc, #36]	@ (8000758 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000734:	4c09      	ldr	r4, [pc, #36]	@ (800075c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000738:	e001      	b.n	800073e <LoopFillZerobss>

0800073a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800073c:	3204      	adds	r2, #4

0800073e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000740:	d3fb      	bcc.n	800073a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000742:	f002 f9c9 	bl	8002ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000746:	f7ff fd01 	bl	800014c <main>
  bx lr
 800074a:	4770      	bx	lr
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000754:	08004078 	.word	0x08004078
  ldr r2, =_sbss
 8000758:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800075c:	2000035c 	.word	0x2000035c

08000760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC1_2_IRQHandler>

08000762 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
	...

08000770 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af04      	add	r7, sp, #16
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800077a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800077e:	9302      	str	r3, [sp, #8]
 8000780:	2301      	movs	r3, #1
 8000782:	9301      	str	r3, [sp, #4]
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	2301      	movs	r3, #1
 800078a:	2200      	movs	r2, #0
 800078c:	2178      	movs	r1, #120	@ 0x78
 800078e:	4803      	ldr	r0, [pc, #12]	@ (800079c <ssd1306_WriteCommand+0x2c>)
 8000790:	f000 fff2 	bl	8001778 <HAL_I2C_Mem_Write>
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000028 	.word	0x20000028

080007a0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af04      	add	r7, sp, #16
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80007b2:	9202      	str	r2, [sp, #8]
 80007b4:	9301      	str	r3, [sp, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	2301      	movs	r3, #1
 80007bc:	2240      	movs	r2, #64	@ 0x40
 80007be:	2178      	movs	r1, #120	@ 0x78
 80007c0:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <ssd1306_WriteData+0x30>)
 80007c2:	f000 ffd9 	bl	8001778 <HAL_I2C_Mem_Write>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000028 	.word	0x20000028

080007d4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80007d8:	f7ff ffc3 	bl	8000762 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80007dc:	2064      	movs	r0, #100	@ 0x64
 80007de:	f000 fa59 	bl	8000c94 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80007e2:	2000      	movs	r0, #0
 80007e4:	f000 f9d6 	bl	8000b94 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80007e8:	2020      	movs	r0, #32
 80007ea:	f7ff ffc1 	bl	8000770 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80007ee:	2000      	movs	r0, #0
 80007f0:	f7ff ffbe 	bl	8000770 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80007f4:	20b0      	movs	r0, #176	@ 0xb0
 80007f6:	f7ff ffbb 	bl	8000770 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80007fa:	20c8      	movs	r0, #200	@ 0xc8
 80007fc:	f7ff ffb8 	bl	8000770 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000800:	2000      	movs	r0, #0
 8000802:	f7ff ffb5 	bl	8000770 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000806:	2010      	movs	r0, #16
 8000808:	f7ff ffb2 	bl	8000770 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800080c:	2040      	movs	r0, #64	@ 0x40
 800080e:	f7ff ffaf 	bl	8000770 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000812:	20ff      	movs	r0, #255	@ 0xff
 8000814:	f000 f9aa 	bl	8000b6c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000818:	20a1      	movs	r0, #161	@ 0xa1
 800081a:	f7ff ffa9 	bl	8000770 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800081e:	20a6      	movs	r0, #166	@ 0xa6
 8000820:	f7ff ffa6 	bl	8000770 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000824:	20a8      	movs	r0, #168	@ 0xa8
 8000826:	f7ff ffa3 	bl	8000770 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800082a:	201f      	movs	r0, #31
 800082c:	f7ff ffa0 	bl	8000770 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000830:	20a4      	movs	r0, #164	@ 0xa4
 8000832:	f7ff ff9d 	bl	8000770 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000836:	20d3      	movs	r0, #211	@ 0xd3
 8000838:	f7ff ff9a 	bl	8000770 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff ff97 	bl	8000770 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000842:	20d5      	movs	r0, #213	@ 0xd5
 8000844:	f7ff ff94 	bl	8000770 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000848:	20f0      	movs	r0, #240	@ 0xf0
 800084a:	f7ff ff91 	bl	8000770 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800084e:	20d9      	movs	r0, #217	@ 0xd9
 8000850:	f7ff ff8e 	bl	8000770 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000854:	2022      	movs	r0, #34	@ 0x22
 8000856:	f7ff ff8b 	bl	8000770 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800085a:	20da      	movs	r0, #218	@ 0xda
 800085c:	f7ff ff88 	bl	8000770 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8000860:	2002      	movs	r0, #2
 8000862:	f7ff ff85 	bl	8000770 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000866:	20db      	movs	r0, #219	@ 0xdb
 8000868:	f7ff ff82 	bl	8000770 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800086c:	2020      	movs	r0, #32
 800086e:	f7ff ff7f 	bl	8000770 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000872:	208d      	movs	r0, #141	@ 0x8d
 8000874:	f7ff ff7c 	bl	8000770 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000878:	2014      	movs	r0, #20
 800087a:	f7ff ff79 	bl	8000770 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800087e:	2001      	movs	r0, #1
 8000880:	f000 f988 	bl	8000b94 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000884:	2000      	movs	r0, #0
 8000886:	f000 f80f 	bl	80008a8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800088a:	f000 f825 	bl	80008d8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800088e:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <ssd1306_Init+0xd0>)
 8000890:	2200      	movs	r2, #0
 8000892:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000894:	4b03      	ldr	r3, [pc, #12]	@ (80008a4 <ssd1306_Init+0xd0>)
 8000896:	2200      	movs	r2, #0
 8000898:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800089a:	4b02      	ldr	r3, [pc, #8]	@ (80008a4 <ssd1306_Init+0xd0>)
 800089c:	2201      	movs	r2, #1
 800089e:	711a      	strb	r2, [r3, #4]
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000350 	.word	0x20000350

080008a8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d101      	bne.n	80008bc <ssd1306_Fill+0x14>
 80008b8:	2300      	movs	r3, #0
 80008ba:	e000      	b.n	80008be <ssd1306_Fill+0x16>
 80008bc:	23ff      	movs	r3, #255	@ 0xff
 80008be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008c2:	4619      	mov	r1, r3
 80008c4:	4803      	ldr	r0, [pc, #12]	@ (80008d4 <ssd1306_Fill+0x2c>)
 80008c6:	f002 f8ff 	bl	8002ac8 <memset>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000150 	.word	0x20000150

080008d8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80008de:	2300      	movs	r3, #0
 80008e0:	71fb      	strb	r3, [r7, #7]
 80008e2:	e016      	b.n	8000912 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	3b50      	subs	r3, #80	@ 0x50
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff ff40 	bl	8000770 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80008f0:	2000      	movs	r0, #0
 80008f2:	f7ff ff3d 	bl	8000770 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80008f6:	2010      	movs	r0, #16
 80008f8:	f7ff ff3a 	bl	8000770 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	01db      	lsls	r3, r3, #7
 8000900:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <ssd1306_UpdateScreen+0x4c>)
 8000902:	4413      	add	r3, r2
 8000904:	2180      	movs	r1, #128	@ 0x80
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff4a 	bl	80007a0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	3301      	adds	r3, #1
 8000910:	71fb      	strb	r3, [r7, #7]
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b03      	cmp	r3, #3
 8000916:	d9e5      	bls.n	80008e4 <ssd1306_UpdateScreen+0xc>
    }
}
 8000918:	bf00      	nop
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000150 	.word	0x20000150

08000928 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
 8000932:	460b      	mov	r3, r1
 8000934:	71bb      	strb	r3, [r7, #6]
 8000936:	4613      	mov	r3, r2
 8000938:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	2b00      	cmp	r3, #0
 8000940:	db3d      	blt.n	80009be <ssd1306_DrawPixel+0x96>
 8000942:	79bb      	ldrb	r3, [r7, #6]
 8000944:	2b1f      	cmp	r3, #31
 8000946:	d83a      	bhi.n	80009be <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000948:	797b      	ldrb	r3, [r7, #5]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d11a      	bne.n	8000984 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800094e:	79fa      	ldrb	r2, [r7, #7]
 8000950:	79bb      	ldrb	r3, [r7, #6]
 8000952:	08db      	lsrs	r3, r3, #3
 8000954:	b2d8      	uxtb	r0, r3
 8000956:	4603      	mov	r3, r0
 8000958:	01db      	lsls	r3, r3, #7
 800095a:	4413      	add	r3, r2
 800095c:	4a1a      	ldr	r2, [pc, #104]	@ (80009c8 <ssd1306_DrawPixel+0xa0>)
 800095e:	5cd3      	ldrb	r3, [r2, r3]
 8000960:	b25a      	sxtb	r2, r3
 8000962:	79bb      	ldrb	r3, [r7, #6]
 8000964:	f003 0307 	and.w	r3, r3, #7
 8000968:	2101      	movs	r1, #1
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	b25b      	sxtb	r3, r3
 8000970:	4313      	orrs	r3, r2
 8000972:	b259      	sxtb	r1, r3
 8000974:	79fa      	ldrb	r2, [r7, #7]
 8000976:	4603      	mov	r3, r0
 8000978:	01db      	lsls	r3, r3, #7
 800097a:	4413      	add	r3, r2
 800097c:	b2c9      	uxtb	r1, r1
 800097e:	4a12      	ldr	r2, [pc, #72]	@ (80009c8 <ssd1306_DrawPixel+0xa0>)
 8000980:	54d1      	strb	r1, [r2, r3]
 8000982:	e01d      	b.n	80009c0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000984:	79fa      	ldrb	r2, [r7, #7]
 8000986:	79bb      	ldrb	r3, [r7, #6]
 8000988:	08db      	lsrs	r3, r3, #3
 800098a:	b2d8      	uxtb	r0, r3
 800098c:	4603      	mov	r3, r0
 800098e:	01db      	lsls	r3, r3, #7
 8000990:	4413      	add	r3, r2
 8000992:	4a0d      	ldr	r2, [pc, #52]	@ (80009c8 <ssd1306_DrawPixel+0xa0>)
 8000994:	5cd3      	ldrb	r3, [r2, r3]
 8000996:	b25a      	sxtb	r2, r3
 8000998:	79bb      	ldrb	r3, [r7, #6]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	2101      	movs	r1, #1
 80009a0:	fa01 f303 	lsl.w	r3, r1, r3
 80009a4:	b25b      	sxtb	r3, r3
 80009a6:	43db      	mvns	r3, r3
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	4013      	ands	r3, r2
 80009ac:	b259      	sxtb	r1, r3
 80009ae:	79fa      	ldrb	r2, [r7, #7]
 80009b0:	4603      	mov	r3, r0
 80009b2:	01db      	lsls	r3, r3, #7
 80009b4:	4413      	add	r3, r2
 80009b6:	b2c9      	uxtb	r1, r1
 80009b8:	4a03      	ldr	r2, [pc, #12]	@ (80009c8 <ssd1306_DrawPixel+0xa0>)
 80009ba:	54d1      	strb	r1, [r2, r3]
 80009bc:	e000      	b.n	80009c0 <ssd1306_DrawPixel+0x98>
        return;
 80009be:	bf00      	nop
    }
}
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	20000150 	.word	0x20000150

080009cc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b089      	sub	sp, #36	@ 0x24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4604      	mov	r4, r0
 80009d4:	4638      	mov	r0, r7
 80009d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80009da:	4623      	mov	r3, r4
 80009dc:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80009de:	7bfb      	ldrb	r3, [r7, #15]
 80009e0:	2b1f      	cmp	r3, #31
 80009e2:	d902      	bls.n	80009ea <ssd1306_WriteChar+0x1e>
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	2b7e      	cmp	r3, #126	@ 0x7e
 80009e8:	d901      	bls.n	80009ee <ssd1306_WriteChar+0x22>
        return 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e079      	b.n	8000ae2 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d005      	beq.n	8000a00 <ssd1306_WriteChar+0x34>
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	3b20      	subs	r3, #32
 80009fa:	4413      	add	r3, r2
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	e000      	b.n	8000a02 <ssd1306_WriteChar+0x36>
 8000a00:	783b      	ldrb	r3, [r7, #0]
 8000a02:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000a04:	4b39      	ldr	r3, [pc, #228]	@ (8000aec <ssd1306_WriteChar+0x120>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	7dfb      	ldrb	r3, [r7, #23]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	2b80      	cmp	r3, #128	@ 0x80
 8000a10:	dc06      	bgt.n	8000a20 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000a12:	4b36      	ldr	r3, [pc, #216]	@ (8000aec <ssd1306_WriteChar+0x120>)
 8000a14:	885b      	ldrh	r3, [r3, #2]
 8000a16:	461a      	mov	r2, r3
 8000a18:	787b      	ldrb	r3, [r7, #1]
 8000a1a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000a1c:	2b20      	cmp	r3, #32
 8000a1e:	dd01      	ble.n	8000a24 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	e05e      	b.n	8000ae2 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	e04d      	b.n	8000ac6 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	3b20      	subs	r3, #32
 8000a30:	7879      	ldrb	r1, [r7, #1]
 8000a32:	fb01 f303 	mul.w	r3, r1, r3
 8000a36:	4619      	mov	r1, r3
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	440b      	add	r3, r1
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	4413      	add	r3, r2
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]
 8000a48:	e036      	b.n	8000ab8 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d013      	beq.n	8000a82 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000a5a:	4b24      	ldr	r3, [pc, #144]	@ (8000aec <ssd1306_WriteChar+0x120>)
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	4413      	add	r3, r2
 8000a66:	b2d8      	uxtb	r0, r3
 8000a68:	4b20      	ldr	r3, [pc, #128]	@ (8000aec <ssd1306_WriteChar+0x120>)
 8000a6a:	885b      	ldrh	r3, [r3, #2]
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	4413      	add	r3, r2
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f7ff ff54 	bl	8000928 <ssd1306_DrawPixel>
 8000a80:	e017      	b.n	8000ab2 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000a82:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <ssd1306_WriteChar+0x120>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4413      	add	r3, r2
 8000a8e:	b2d8      	uxtb	r0, r3
 8000a90:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <ssd1306_WriteChar+0x120>)
 8000a92:	885b      	ldrh	r3, [r3, #2]
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	4413      	add	r3, r2
 8000a9c:	b2d9      	uxtb	r1, r3
 8000a9e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	bf0c      	ite	eq
 8000aa6:	2301      	moveq	r3, #1
 8000aa8:	2300      	movne	r3, #0
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	461a      	mov	r2, r3
 8000aae:	f7ff ff3b 	bl	8000928 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	61bb      	str	r3, [r7, #24]
 8000ab8:	7dfb      	ldrb	r3, [r7, #23]
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d3c4      	bcc.n	8000a4a <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	61fb      	str	r3, [r7, #28]
 8000ac6:	787b      	ldrb	r3, [r7, #1]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d3ac      	bcc.n	8000a2a <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <ssd1306_WriteChar+0x120>)
 8000ad2:	881a      	ldrh	r2, [r3, #0]
 8000ad4:	7dfb      	ldrb	r3, [r7, #23]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	4413      	add	r3, r2
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	4b03      	ldr	r3, [pc, #12]	@ (8000aec <ssd1306_WriteChar+0x120>)
 8000ade:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3724      	adds	r7, #36	@ 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd90      	pop	{r4, r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000350 	.word	0x20000350

08000af0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af02      	add	r7, sp, #8
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	4638      	mov	r0, r7
 8000afa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000afe:	e013      	b.n	8000b28 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	7818      	ldrb	r0, [r3, #0]
 8000b04:	7e3b      	ldrb	r3, [r7, #24]
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	463b      	mov	r3, r7
 8000b0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b0c:	f7ff ff5e 	bl	80009cc <ssd1306_WriteChar>
 8000b10:	4603      	mov	r3, r0
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d002      	beq.n	8000b22 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	e008      	b.n	8000b34 <ssd1306_WriteString+0x44>
        }
        str++;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	3301      	adds	r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1e7      	bne.n	8000b00 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	781b      	ldrb	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	460a      	mov	r2, r1
 8000b46:	71fb      	strb	r3, [r7, #7]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <ssd1306_SetCursor+0x2c>)
 8000b52:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000b54:	79bb      	ldrb	r3, [r7, #6]
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	4b03      	ldr	r3, [pc, #12]	@ (8000b68 <ssd1306_SetCursor+0x2c>)
 8000b5a:	805a      	strh	r2, [r3, #2]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000350 	.word	0x20000350

08000b6c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000b76:	2381      	movs	r3, #129	@ 0x81
 8000b78:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fdf7 	bl	8000770 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fdf3 	bl	8000770 <ssd1306_WriteCommand>
}
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d005      	beq.n	8000bb0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000ba4:	23af      	movs	r3, #175	@ 0xaf
 8000ba6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <ssd1306_SetDisplayOn+0x38>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	715a      	strb	r2, [r3, #5]
 8000bae:	e004      	b.n	8000bba <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000bb0:	23ae      	movs	r3, #174	@ 0xae
 8000bb2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000bb4:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <ssd1306_SetDisplayOn+0x38>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fdd7 	bl	8000770 <ssd1306_WriteCommand>
}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000350 	.word	0x20000350

08000bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd4:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <HAL_Init+0x28>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	@ (8000bf8 <HAL_Init+0x28>)
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 f947 	bl	8000e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be6:	200f      	movs	r0, #15
 8000be8:	f000 f808 	bl	8000bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bec:	f7ff fc2c 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40022000 	.word	0x40022000

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c04:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <HAL_InitTick+0x54>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <HAL_InitTick+0x58>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f95f 	bl	8000ede <HAL_SYSTICK_Config>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00e      	b.n	8000c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d80a      	bhi.n	8000c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c38:	f000 f927 	bl	8000e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3c:	4a06      	ldr	r2, [pc, #24]	@ (8000c58 <HAL_InitTick+0x5c>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000000 	.word	0x20000000
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000004 	.word	0x20000004

08000c5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <HAL_IncTick+0x1c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <HAL_IncTick+0x20>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a03      	ldr	r2, [pc, #12]	@ (8000c7c <HAL_IncTick+0x20>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000358 	.word	0x20000358

08000c80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b02      	ldr	r3, [pc, #8]	@ (8000c90 <HAL_GetTick+0x10>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	20000358 	.word	0x20000358

08000c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c9c:	f7ff fff0 	bl	8000c80 <HAL_GetTick>
 8000ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000cac:	d005      	beq.n	8000cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cae:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <HAL_Delay+0x44>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cba:	bf00      	nop
 8000cbc:	f7ff ffe0 	bl	8000c80 <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d8f7      	bhi.n	8000cbc <HAL_Delay+0x28>
  {
  }
}
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008

08000cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	@ (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	@ (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	db0b      	blt.n	8000d6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	f003 021f 	and.w	r2, r3, #31
 8000d58:	4906      	ldr	r1, [pc, #24]	@ (8000d74 <__NVIC_EnableIRQ+0x34>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	095b      	lsrs	r3, r3, #5
 8000d60:	2001      	movs	r0, #1
 8000d62:	fa00 f202 	lsl.w	r2, r0, r2
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	@ (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	@ (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	@ 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	@ 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e40:	d301      	bcc.n	8000e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00f      	b.n	8000e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e46:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <SysTick_Config+0x40>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4e:	210f      	movs	r1, #15
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e54:	f7ff ff90 	bl	8000d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e58:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <SysTick_Config+0x40>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5e:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <SysTick_Config+0x40>)
 8000e60:	2207      	movs	r2, #7
 8000e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	e000e010 	.word	0xe000e010

08000e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ff2d 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9c:	f7ff ff42 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	68b9      	ldr	r1, [r7, #8]
 8000ea6:	6978      	ldr	r0, [r7, #20]
 8000ea8:	f7ff ff90 	bl	8000dcc <NVIC_EncodePriority>
 8000eac:	4602      	mov	r2, r0
 8000eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff5f 	bl	8000d78 <__NVIC_SetPriority>
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff35 	bl	8000d40 <__NVIC_EnableIRQ>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffa2 	bl	8000e30 <SysTick_Config>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e043      	b.n	8000f96 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b22      	ldr	r3, [pc, #136]	@ (8000fa0 <HAL_DMA_Init+0xa8>)
 8000f16:	4413      	add	r3, r2
 8000f18:	4a22      	ldr	r2, [pc, #136]	@ (8000fa4 <HAL_DMA_Init+0xac>)
 8000f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1e:	091b      	lsrs	r3, r3, #4
 8000f20:	009a      	lsls	r2, r3, #2
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa8 <HAL_DMA_Init+0xb0>)
 8000f2a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2202      	movs	r2, #2
 8000f30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000f42:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000f46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	bffdfff8 	.word	0xbffdfff8
 8000fa4:	cccccccd 	.word	0xcccccccd
 8000fa8:	40020000 	.word	0x40020000

08000fac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc8:	2204      	movs	r2, #4
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d04f      	beq.n	8001074 <HAL_DMA_IRQHandler+0xc8>
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d04a      	beq.n	8001074 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0320 	and.w	r3, r3, #32
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d107      	bne.n	8000ffc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 0204 	bic.w	r2, r2, #4
 8000ffa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a66      	ldr	r2, [pc, #408]	@ (800119c <HAL_DMA_IRQHandler+0x1f0>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d029      	beq.n	800105a <HAL_DMA_IRQHandler+0xae>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a65      	ldr	r2, [pc, #404]	@ (80011a0 <HAL_DMA_IRQHandler+0x1f4>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d022      	beq.n	8001056 <HAL_DMA_IRQHandler+0xaa>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a63      	ldr	r2, [pc, #396]	@ (80011a4 <HAL_DMA_IRQHandler+0x1f8>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01a      	beq.n	8001050 <HAL_DMA_IRQHandler+0xa4>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a62      	ldr	r2, [pc, #392]	@ (80011a8 <HAL_DMA_IRQHandler+0x1fc>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d012      	beq.n	800104a <HAL_DMA_IRQHandler+0x9e>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a60      	ldr	r2, [pc, #384]	@ (80011ac <HAL_DMA_IRQHandler+0x200>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d00a      	beq.n	8001044 <HAL_DMA_IRQHandler+0x98>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a5f      	ldr	r2, [pc, #380]	@ (80011b0 <HAL_DMA_IRQHandler+0x204>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d102      	bne.n	800103e <HAL_DMA_IRQHandler+0x92>
 8001038:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800103c:	e00e      	b.n	800105c <HAL_DMA_IRQHandler+0xb0>
 800103e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001042:	e00b      	b.n	800105c <HAL_DMA_IRQHandler+0xb0>
 8001044:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001048:	e008      	b.n	800105c <HAL_DMA_IRQHandler+0xb0>
 800104a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800104e:	e005      	b.n	800105c <HAL_DMA_IRQHandler+0xb0>
 8001050:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001054:	e002      	b.n	800105c <HAL_DMA_IRQHandler+0xb0>
 8001056:	2340      	movs	r3, #64	@ 0x40
 8001058:	e000      	b.n	800105c <HAL_DMA_IRQHandler+0xb0>
 800105a:	2304      	movs	r3, #4
 800105c:	4a55      	ldr	r2, [pc, #340]	@ (80011b4 <HAL_DMA_IRQHandler+0x208>)
 800105e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 8094 	beq.w	8001192 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001072:	e08e      	b.n	8001192 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001078:	2202      	movs	r2, #2
 800107a:	409a      	lsls	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4013      	ands	r3, r2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d056      	beq.n	8001132 <HAL_DMA_IRQHandler+0x186>
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d051      	beq.n	8001132 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0320 	and.w	r3, r3, #32
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10b      	bne.n	80010b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 020a 	bic.w	r2, r2, #10
 80010aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a38      	ldr	r2, [pc, #224]	@ (800119c <HAL_DMA_IRQHandler+0x1f0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d029      	beq.n	8001112 <HAL_DMA_IRQHandler+0x166>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a37      	ldr	r2, [pc, #220]	@ (80011a0 <HAL_DMA_IRQHandler+0x1f4>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d022      	beq.n	800110e <HAL_DMA_IRQHandler+0x162>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a35      	ldr	r2, [pc, #212]	@ (80011a4 <HAL_DMA_IRQHandler+0x1f8>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d01a      	beq.n	8001108 <HAL_DMA_IRQHandler+0x15c>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a34      	ldr	r2, [pc, #208]	@ (80011a8 <HAL_DMA_IRQHandler+0x1fc>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d012      	beq.n	8001102 <HAL_DMA_IRQHandler+0x156>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a32      	ldr	r2, [pc, #200]	@ (80011ac <HAL_DMA_IRQHandler+0x200>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00a      	beq.n	80010fc <HAL_DMA_IRQHandler+0x150>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a31      	ldr	r2, [pc, #196]	@ (80011b0 <HAL_DMA_IRQHandler+0x204>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d102      	bne.n	80010f6 <HAL_DMA_IRQHandler+0x14a>
 80010f0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80010f4:	e00e      	b.n	8001114 <HAL_DMA_IRQHandler+0x168>
 80010f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010fa:	e00b      	b.n	8001114 <HAL_DMA_IRQHandler+0x168>
 80010fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001100:	e008      	b.n	8001114 <HAL_DMA_IRQHandler+0x168>
 8001102:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001106:	e005      	b.n	8001114 <HAL_DMA_IRQHandler+0x168>
 8001108:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800110c:	e002      	b.n	8001114 <HAL_DMA_IRQHandler+0x168>
 800110e:	2320      	movs	r3, #32
 8001110:	e000      	b.n	8001114 <HAL_DMA_IRQHandler+0x168>
 8001112:	2302      	movs	r3, #2
 8001114:	4a27      	ldr	r2, [pc, #156]	@ (80011b4 <HAL_DMA_IRQHandler+0x208>)
 8001116:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001124:	2b00      	cmp	r3, #0
 8001126:	d034      	beq.n	8001192 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001130:	e02f      	b.n	8001192 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	2208      	movs	r2, #8
 8001138:	409a      	lsls	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d028      	beq.n	8001194 <HAL_DMA_IRQHandler+0x1e8>
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	2b00      	cmp	r3, #0
 800114a:	d023      	beq.n	8001194 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 020e 	bic.w	r2, r2, #14
 800115a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001164:	2101      	movs	r1, #1
 8001166:	fa01 f202 	lsl.w	r2, r1, r2
 800116a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	2b00      	cmp	r3, #0
 8001188:	d004      	beq.n	8001194 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	4798      	blx	r3
    }
  }
  return;
 8001192:	bf00      	nop
 8001194:	bf00      	nop
}
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40020008 	.word	0x40020008
 80011a0:	4002001c 	.word	0x4002001c
 80011a4:	40020030 	.word	0x40020030
 80011a8:	40020044 	.word	0x40020044
 80011ac:	40020058 	.word	0x40020058
 80011b0:	4002006c 	.word	0x4002006c
 80011b4:	40020000 	.word	0x40020000

080011b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b08b      	sub	sp, #44	@ 0x2c
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ca:	e169      	b.n	80014a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011cc:	2201      	movs	r2, #1
 80011ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	69fa      	ldr	r2, [r7, #28]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	f040 8158 	bne.w	800149a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	4a9a      	ldr	r2, [pc, #616]	@ (8001458 <HAL_GPIO_Init+0x2a0>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d05e      	beq.n	80012b2 <HAL_GPIO_Init+0xfa>
 80011f4:	4a98      	ldr	r2, [pc, #608]	@ (8001458 <HAL_GPIO_Init+0x2a0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d875      	bhi.n	80012e6 <HAL_GPIO_Init+0x12e>
 80011fa:	4a98      	ldr	r2, [pc, #608]	@ (800145c <HAL_GPIO_Init+0x2a4>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d058      	beq.n	80012b2 <HAL_GPIO_Init+0xfa>
 8001200:	4a96      	ldr	r2, [pc, #600]	@ (800145c <HAL_GPIO_Init+0x2a4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d86f      	bhi.n	80012e6 <HAL_GPIO_Init+0x12e>
 8001206:	4a96      	ldr	r2, [pc, #600]	@ (8001460 <HAL_GPIO_Init+0x2a8>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d052      	beq.n	80012b2 <HAL_GPIO_Init+0xfa>
 800120c:	4a94      	ldr	r2, [pc, #592]	@ (8001460 <HAL_GPIO_Init+0x2a8>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d869      	bhi.n	80012e6 <HAL_GPIO_Init+0x12e>
 8001212:	4a94      	ldr	r2, [pc, #592]	@ (8001464 <HAL_GPIO_Init+0x2ac>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d04c      	beq.n	80012b2 <HAL_GPIO_Init+0xfa>
 8001218:	4a92      	ldr	r2, [pc, #584]	@ (8001464 <HAL_GPIO_Init+0x2ac>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d863      	bhi.n	80012e6 <HAL_GPIO_Init+0x12e>
 800121e:	4a92      	ldr	r2, [pc, #584]	@ (8001468 <HAL_GPIO_Init+0x2b0>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d046      	beq.n	80012b2 <HAL_GPIO_Init+0xfa>
 8001224:	4a90      	ldr	r2, [pc, #576]	@ (8001468 <HAL_GPIO_Init+0x2b0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d85d      	bhi.n	80012e6 <HAL_GPIO_Init+0x12e>
 800122a:	2b12      	cmp	r3, #18
 800122c:	d82a      	bhi.n	8001284 <HAL_GPIO_Init+0xcc>
 800122e:	2b12      	cmp	r3, #18
 8001230:	d859      	bhi.n	80012e6 <HAL_GPIO_Init+0x12e>
 8001232:	a201      	add	r2, pc, #4	@ (adr r2, 8001238 <HAL_GPIO_Init+0x80>)
 8001234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001238:	080012b3 	.word	0x080012b3
 800123c:	0800128d 	.word	0x0800128d
 8001240:	0800129f 	.word	0x0800129f
 8001244:	080012e1 	.word	0x080012e1
 8001248:	080012e7 	.word	0x080012e7
 800124c:	080012e7 	.word	0x080012e7
 8001250:	080012e7 	.word	0x080012e7
 8001254:	080012e7 	.word	0x080012e7
 8001258:	080012e7 	.word	0x080012e7
 800125c:	080012e7 	.word	0x080012e7
 8001260:	080012e7 	.word	0x080012e7
 8001264:	080012e7 	.word	0x080012e7
 8001268:	080012e7 	.word	0x080012e7
 800126c:	080012e7 	.word	0x080012e7
 8001270:	080012e7 	.word	0x080012e7
 8001274:	080012e7 	.word	0x080012e7
 8001278:	080012e7 	.word	0x080012e7
 800127c:	08001295 	.word	0x08001295
 8001280:	080012a9 	.word	0x080012a9
 8001284:	4a79      	ldr	r2, [pc, #484]	@ (800146c <HAL_GPIO_Init+0x2b4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d013      	beq.n	80012b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800128a:	e02c      	b.n	80012e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	623b      	str	r3, [r7, #32]
          break;
 8001292:	e029      	b.n	80012e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	3304      	adds	r3, #4
 800129a:	623b      	str	r3, [r7, #32]
          break;
 800129c:	e024      	b.n	80012e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	3308      	adds	r3, #8
 80012a4:	623b      	str	r3, [r7, #32]
          break;
 80012a6:	e01f      	b.n	80012e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	330c      	adds	r3, #12
 80012ae:	623b      	str	r3, [r7, #32]
          break;
 80012b0:	e01a      	b.n	80012e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d102      	bne.n	80012c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ba:	2304      	movs	r3, #4
 80012bc:	623b      	str	r3, [r7, #32]
          break;
 80012be:	e013      	b.n	80012e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d105      	bne.n	80012d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c8:	2308      	movs	r3, #8
 80012ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69fa      	ldr	r2, [r7, #28]
 80012d0:	611a      	str	r2, [r3, #16]
          break;
 80012d2:	e009      	b.n	80012e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012d4:	2308      	movs	r3, #8
 80012d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	69fa      	ldr	r2, [r7, #28]
 80012dc:	615a      	str	r2, [r3, #20]
          break;
 80012de:	e003      	b.n	80012e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
          break;
 80012e4:	e000      	b.n	80012e8 <HAL_GPIO_Init+0x130>
          break;
 80012e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2bff      	cmp	r3, #255	@ 0xff
 80012ec:	d801      	bhi.n	80012f2 <HAL_GPIO_Init+0x13a>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	e001      	b.n	80012f6 <HAL_GPIO_Init+0x13e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3304      	adds	r3, #4
 80012f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	2bff      	cmp	r3, #255	@ 0xff
 80012fc:	d802      	bhi.n	8001304 <HAL_GPIO_Init+0x14c>
 80012fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	e002      	b.n	800130a <HAL_GPIO_Init+0x152>
 8001304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001306:	3b08      	subs	r3, #8
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	210f      	movs	r1, #15
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	fa01 f303 	lsl.w	r3, r1, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	401a      	ands	r2, r3
 800131c:	6a39      	ldr	r1, [r7, #32]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	fa01 f303 	lsl.w	r3, r1, r3
 8001324:	431a      	orrs	r2, r3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 80b1 	beq.w	800149a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001338:	4b4d      	ldr	r3, [pc, #308]	@ (8001470 <HAL_GPIO_Init+0x2b8>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4a4c      	ldr	r2, [pc, #304]	@ (8001470 <HAL_GPIO_Init+0x2b8>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6193      	str	r3, [r2, #24]
 8001344:	4b4a      	ldr	r3, [pc, #296]	@ (8001470 <HAL_GPIO_Init+0x2b8>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001350:	4a48      	ldr	r2, [pc, #288]	@ (8001474 <HAL_GPIO_Init+0x2bc>)
 8001352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	220f      	movs	r2, #15
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	4013      	ands	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a40      	ldr	r2, [pc, #256]	@ (8001478 <HAL_GPIO_Init+0x2c0>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d013      	beq.n	80013a4 <HAL_GPIO_Init+0x1ec>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a3f      	ldr	r2, [pc, #252]	@ (800147c <HAL_GPIO_Init+0x2c4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d00d      	beq.n	80013a0 <HAL_GPIO_Init+0x1e8>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a3e      	ldr	r2, [pc, #248]	@ (8001480 <HAL_GPIO_Init+0x2c8>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d007      	beq.n	800139c <HAL_GPIO_Init+0x1e4>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a3d      	ldr	r2, [pc, #244]	@ (8001484 <HAL_GPIO_Init+0x2cc>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d101      	bne.n	8001398 <HAL_GPIO_Init+0x1e0>
 8001394:	2303      	movs	r3, #3
 8001396:	e006      	b.n	80013a6 <HAL_GPIO_Init+0x1ee>
 8001398:	2304      	movs	r3, #4
 800139a:	e004      	b.n	80013a6 <HAL_GPIO_Init+0x1ee>
 800139c:	2302      	movs	r3, #2
 800139e:	e002      	b.n	80013a6 <HAL_GPIO_Init+0x1ee>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <HAL_GPIO_Init+0x1ee>
 80013a4:	2300      	movs	r3, #0
 80013a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013a8:	f002 0203 	and.w	r2, r2, #3
 80013ac:	0092      	lsls	r2, r2, #2
 80013ae:	4093      	lsls	r3, r2
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013b6:	492f      	ldr	r1, [pc, #188]	@ (8001474 <HAL_GPIO_Init+0x2bc>)
 80013b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ba:	089b      	lsrs	r3, r3, #2
 80013bc:	3302      	adds	r3, #2
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d006      	beq.n	80013de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	492c      	ldr	r1, [pc, #176]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	608b      	str	r3, [r1, #8]
 80013dc:	e006      	b.n	80013ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013de:	4b2a      	ldr	r3, [pc, #168]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	4928      	ldr	r1, [pc, #160]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d006      	beq.n	8001406 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013f8:	4b23      	ldr	r3, [pc, #140]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 80013fa:	68da      	ldr	r2, [r3, #12]
 80013fc:	4922      	ldr	r1, [pc, #136]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	60cb      	str	r3, [r1, #12]
 8001404:	e006      	b.n	8001414 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001406:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	43db      	mvns	r3, r3
 800140e:	491e      	ldr	r1, [pc, #120]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 8001410:	4013      	ands	r3, r2
 8001412:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d006      	beq.n	800142e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001420:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	4918      	ldr	r1, [pc, #96]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	604b      	str	r3, [r1, #4]
 800142c:	e006      	b.n	800143c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800142e:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	43db      	mvns	r3, r3
 8001436:	4914      	ldr	r1, [pc, #80]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 8001438:	4013      	ands	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d021      	beq.n	800148c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001448:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	490e      	ldr	r1, [pc, #56]	@ (8001488 <HAL_GPIO_Init+0x2d0>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
 8001454:	e021      	b.n	800149a <HAL_GPIO_Init+0x2e2>
 8001456:	bf00      	nop
 8001458:	10320000 	.word	0x10320000
 800145c:	10310000 	.word	0x10310000
 8001460:	10220000 	.word	0x10220000
 8001464:	10210000 	.word	0x10210000
 8001468:	10120000 	.word	0x10120000
 800146c:	10110000 	.word	0x10110000
 8001470:	40021000 	.word	0x40021000
 8001474:	40010000 	.word	0x40010000
 8001478:	40010800 	.word	0x40010800
 800147c:	40010c00 	.word	0x40010c00
 8001480:	40011000 	.word	0x40011000
 8001484:	40011400 	.word	0x40011400
 8001488:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800148c:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <HAL_GPIO_Init+0x304>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	43db      	mvns	r3, r3
 8001494:	4909      	ldr	r1, [pc, #36]	@ (80014bc <HAL_GPIO_Init+0x304>)
 8001496:	4013      	ands	r3, r2
 8001498:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800149a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149c:	3301      	adds	r3, #1
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a6:	fa22 f303 	lsr.w	r3, r2, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f47f ae8e 	bne.w	80011cc <HAL_GPIO_Init+0x14>
  }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	372c      	adds	r7, #44	@ 0x2c
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	40010400 	.word	0x40010400

080014c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
 80014cc:	4613      	mov	r3, r2
 80014ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d0:	787b      	ldrb	r3, [r7, #1]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014dc:	e003      	b.n	80014e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	041a      	lsls	r2, r3, #16
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	611a      	str	r2, [r3, #16]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e12b      	b.n	800175a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d106      	bne.n	800151c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7fe ffc8 	bl	80004ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2224      	movs	r2, #36	@ 0x24
 8001520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0201 	bic.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001542:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001552:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001554:	f001 f842 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 8001558:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4a81      	ldr	r2, [pc, #516]	@ (8001764 <HAL_I2C_Init+0x274>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d807      	bhi.n	8001574 <HAL_I2C_Init+0x84>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4a80      	ldr	r2, [pc, #512]	@ (8001768 <HAL_I2C_Init+0x278>)
 8001568:	4293      	cmp	r3, r2
 800156a:	bf94      	ite	ls
 800156c:	2301      	movls	r3, #1
 800156e:	2300      	movhi	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	e006      	b.n	8001582 <HAL_I2C_Init+0x92>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4a7d      	ldr	r2, [pc, #500]	@ (800176c <HAL_I2C_Init+0x27c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	bf94      	ite	ls
 800157c:	2301      	movls	r3, #1
 800157e:	2300      	movhi	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e0e7      	b.n	800175a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4a78      	ldr	r2, [pc, #480]	@ (8001770 <HAL_I2C_Init+0x280>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	0c9b      	lsrs	r3, r3, #18
 8001594:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001764 <HAL_I2C_Init+0x274>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d802      	bhi.n	80015c4 <HAL_I2C_Init+0xd4>
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	3301      	adds	r3, #1
 80015c2:	e009      	b.n	80015d8 <HAL_I2C_Init+0xe8>
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015ca:	fb02 f303 	mul.w	r3, r2, r3
 80015ce:	4a69      	ldr	r2, [pc, #420]	@ (8001774 <HAL_I2C_Init+0x284>)
 80015d0:	fba2 2303 	umull	r2, r3, r2, r3
 80015d4:	099b      	lsrs	r3, r3, #6
 80015d6:	3301      	adds	r3, #1
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	430b      	orrs	r3, r1
 80015de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80015ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	495c      	ldr	r1, [pc, #368]	@ (8001764 <HAL_I2C_Init+0x274>)
 80015f4:	428b      	cmp	r3, r1
 80015f6:	d819      	bhi.n	800162c <HAL_I2C_Init+0x13c>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1e59      	subs	r1, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	fbb1 f3f3 	udiv	r3, r1, r3
 8001606:	1c59      	adds	r1, r3, #1
 8001608:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800160c:	400b      	ands	r3, r1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00a      	beq.n	8001628 <HAL_I2C_Init+0x138>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1e59      	subs	r1, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001620:	3301      	adds	r3, #1
 8001622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001626:	e051      	b.n	80016cc <HAL_I2C_Init+0x1dc>
 8001628:	2304      	movs	r3, #4
 800162a:	e04f      	b.n	80016cc <HAL_I2C_Init+0x1dc>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d111      	bne.n	8001658 <HAL_I2C_Init+0x168>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	1e58      	subs	r0, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	440b      	add	r3, r1
 8001642:	fbb0 f3f3 	udiv	r3, r0, r3
 8001646:	3301      	adds	r3, #1
 8001648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf0c      	ite	eq
 8001650:	2301      	moveq	r3, #1
 8001652:	2300      	movne	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	e012      	b.n	800167e <HAL_I2C_Init+0x18e>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1e58      	subs	r0, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6859      	ldr	r1, [r3, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	0099      	lsls	r1, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	fbb0 f3f3 	udiv	r3, r0, r3
 800166e:	3301      	adds	r3, #1
 8001670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001674:	2b00      	cmp	r3, #0
 8001676:	bf0c      	ite	eq
 8001678:	2301      	moveq	r3, #1
 800167a:	2300      	movne	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_I2C_Init+0x196>
 8001682:	2301      	movs	r3, #1
 8001684:	e022      	b.n	80016cc <HAL_I2C_Init+0x1dc>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10e      	bne.n	80016ac <HAL_I2C_Init+0x1bc>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1e58      	subs	r0, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6859      	ldr	r1, [r3, #4]
 8001696:	460b      	mov	r3, r1
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	440b      	add	r3, r1
 800169c:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a0:	3301      	adds	r3, #1
 80016a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016aa:	e00f      	b.n	80016cc <HAL_I2C_Init+0x1dc>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1e58      	subs	r0, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6859      	ldr	r1, [r3, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	0099      	lsls	r1, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c2:	3301      	adds	r3, #1
 80016c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	6809      	ldr	r1, [r1, #0]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69da      	ldr	r2, [r3, #28]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80016fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6911      	ldr	r1, [r2, #16]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68d2      	ldr	r2, [r2, #12]
 8001706:	4311      	orrs	r1, r2
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	430b      	orrs	r3, r1
 800170e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695a      	ldr	r2, [r3, #20]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0201 	orr.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2220      	movs	r2, #32
 8001746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	000186a0 	.word	0x000186a0
 8001768:	001e847f 	.word	0x001e847f
 800176c:	003d08ff 	.word	0x003d08ff
 8001770:	431bde83 	.word	0x431bde83
 8001774:	10624dd3 	.word	0x10624dd3

08001778 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af02      	add	r7, sp, #8
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	4608      	mov	r0, r1
 8001782:	4611      	mov	r1, r2
 8001784:	461a      	mov	r2, r3
 8001786:	4603      	mov	r3, r0
 8001788:	817b      	strh	r3, [r7, #10]
 800178a:	460b      	mov	r3, r1
 800178c:	813b      	strh	r3, [r7, #8]
 800178e:	4613      	mov	r3, r2
 8001790:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001792:	f7ff fa75 	bl	8000c80 <HAL_GetTick>
 8001796:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b20      	cmp	r3, #32
 80017a2:	f040 80d9 	bne.w	8001958 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2319      	movs	r3, #25
 80017ac:	2201      	movs	r2, #1
 80017ae:	496d      	ldr	r1, [pc, #436]	@ (8001964 <HAL_I2C_Mem_Write+0x1ec>)
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f000 f971 	bl	8001a98 <I2C_WaitOnFlagUntilTimeout>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80017bc:	2302      	movs	r3, #2
 80017be:	e0cc      	b.n	800195a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_I2C_Mem_Write+0x56>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e0c5      	b.n	800195a <HAL_I2C_Mem_Write+0x1e2>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d007      	beq.n	80017f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0201 	orr.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001802:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2221      	movs	r2, #33	@ 0x21
 8001808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2240      	movs	r2, #64	@ 0x40
 8001810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6a3a      	ldr	r2, [r7, #32]
 800181e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001824:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800182a:	b29a      	uxth	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4a4d      	ldr	r2, [pc, #308]	@ (8001968 <HAL_I2C_Mem_Write+0x1f0>)
 8001834:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001836:	88f8      	ldrh	r0, [r7, #6]
 8001838:	893a      	ldrh	r2, [r7, #8]
 800183a:	8979      	ldrh	r1, [r7, #10]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	4603      	mov	r3, r0
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f000 f890 	bl	800196c <I2C_RequestMemoryWrite>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d052      	beq.n	80018f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e081      	b.n	800195a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 fa36 	bl	8001ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00d      	beq.n	8001882 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	2b04      	cmp	r3, #4
 800186c:	d107      	bne.n	800187e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800187c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e06b      	b.n	800195a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001886:	781a      	ldrb	r2, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800189c:	3b01      	subs	r3, #1
 800189e:	b29a      	uxth	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	3b01      	subs	r3, #1
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d11b      	bne.n	80018f8 <HAL_I2C_Mem_Write+0x180>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d017      	beq.n	80018f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e2:	3b01      	subs	r3, #1
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	3b01      	subs	r3, #1
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1aa      	bne.n	8001856 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 fa29 	bl	8001d5c <I2C_WaitOnBTFFlagUntilTimeout>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00d      	beq.n	800192c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001914:	2b04      	cmp	r3, #4
 8001916:	d107      	bne.n	8001928 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001926:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e016      	b.n	800195a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800193a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2220      	movs	r2, #32
 8001940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	e000      	b.n	800195a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001958:	2302      	movs	r3, #2
  }
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	00100002 	.word	0x00100002
 8001968:	ffff0000 	.word	0xffff0000

0800196c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af02      	add	r7, sp, #8
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	4608      	mov	r0, r1
 8001976:	4611      	mov	r1, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4603      	mov	r3, r0
 800197c:	817b      	strh	r3, [r7, #10]
 800197e:	460b      	mov	r3, r1
 8001980:	813b      	strh	r3, [r7, #8]
 8001982:	4613      	mov	r3, r2
 8001984:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001994:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	2200      	movs	r2, #0
 800199e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 f878 	bl	8001a98 <I2C_WaitOnFlagUntilTimeout>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00d      	beq.n	80019ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019bc:	d103      	bne.n	80019c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e05f      	b.n	8001a8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019ca:	897b      	ldrh	r3, [r7, #10]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	461a      	mov	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80019d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	6a3a      	ldr	r2, [r7, #32]
 80019de:	492d      	ldr	r1, [pc, #180]	@ (8001a94 <I2C_RequestMemoryWrite+0x128>)
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 f8d3 	bl	8001b8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e04c      	b.n	8001a8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a08:	6a39      	ldr	r1, [r7, #32]
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 f95e 	bl	8001ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00d      	beq.n	8001a32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d107      	bne.n	8001a2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e02b      	b.n	8001a8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d105      	bne.n	8001a44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a38:	893b      	ldrh	r3, [r7, #8]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	611a      	str	r2, [r3, #16]
 8001a42:	e021      	b.n	8001a88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a44:	893b      	ldrh	r3, [r7, #8]
 8001a46:	0a1b      	lsrs	r3, r3, #8
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a54:	6a39      	ldr	r1, [r7, #32]
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 f938 	bl	8001ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00d      	beq.n	8001a7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d107      	bne.n	8001a7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e005      	b.n	8001a8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a7e:	893b      	ldrh	r3, [r7, #8]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	00010002 	.word	0x00010002

08001a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001aa8:	e048      	b.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ab0:	d044      	beq.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ab2:	f7ff f8e5 	bl	8000c80 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d302      	bcc.n	8001ac8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d139      	bne.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	0c1b      	lsrs	r3, r3, #16
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d10d      	bne.n	8001aee <I2C_WaitOnFlagUntilTimeout+0x56>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	43da      	mvns	r2, r3
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	4013      	ands	r3, r2
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	e00c      	b.n	8001b08 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	43da      	mvns	r2, r3
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	4013      	ands	r3, r2
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	bf0c      	ite	eq
 8001b00:	2301      	moveq	r3, #1
 8001b02:	2300      	movne	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d116      	bne.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2220      	movs	r2, #32
 8001b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b28:	f043 0220 	orr.w	r2, r3, #32
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e023      	b.n	8001b84 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	0c1b      	lsrs	r3, r3, #16
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d10d      	bne.n	8001b62 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	43da      	mvns	r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	4013      	ands	r3, r2
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf0c      	ite	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2300      	movne	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	e00c      	b.n	8001b7c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	43da      	mvns	r2, r3
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf0c      	ite	eq
 8001b74:	2301      	moveq	r3, #1
 8001b76:	2300      	movne	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d093      	beq.n	8001aaa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b9a:	e071      	b.n	8001c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001baa:	d123      	bne.n	8001bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001bc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be0:	f043 0204 	orr.w	r2, r3, #4
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e067      	b.n	8001cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bfa:	d041      	beq.n	8001c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bfc:	f7ff f840 	bl	8000c80 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d302      	bcc.n	8001c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d136      	bne.n	8001c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	0c1b      	lsrs	r3, r3, #16
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d10c      	bne.n	8001c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4013      	ands	r3, r2
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	bf14      	ite	ne
 8001c2e:	2301      	movne	r3, #1
 8001c30:	2300      	moveq	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	e00b      	b.n	8001c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	43da      	mvns	r2, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	4013      	ands	r3, r2
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bf14      	ite	ne
 8001c48:	2301      	movne	r3, #1
 8001c4a:	2300      	moveq	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d016      	beq.n	8001c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6c:	f043 0220 	orr.w	r2, r3, #32
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e021      	b.n	8001cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	0c1b      	lsrs	r3, r3, #16
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d10c      	bne.n	8001ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	43da      	mvns	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	4013      	ands	r3, r2
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf14      	ite	ne
 8001c9c:	2301      	movne	r3, #1
 8001c9e:	2300      	moveq	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	e00b      	b.n	8001cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	43da      	mvns	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	bf14      	ite	ne
 8001cb6:	2301      	movne	r3, #1
 8001cb8:	2300      	moveq	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f47f af6d 	bne.w	8001b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cd8:	e034      	b.n	8001d44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f886 	bl	8001dec <I2C_IsAcknowledgeFailed>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e034      	b.n	8001d54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001cf0:	d028      	beq.n	8001d44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf2:	f7fe ffc5 	bl	8000c80 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d302      	bcc.n	8001d08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d11d      	bne.n	8001d44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d12:	2b80      	cmp	r3, #128	@ 0x80
 8001d14:	d016      	beq.n	8001d44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	f043 0220 	orr.w	r2, r3, #32
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e007      	b.n	8001d54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d4e:	2b80      	cmp	r3, #128	@ 0x80
 8001d50:	d1c3      	bne.n	8001cda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d68:	e034      	b.n	8001dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 f83e 	bl	8001dec <I2C_IsAcknowledgeFailed>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e034      	b.n	8001de4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d80:	d028      	beq.n	8001dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d82:	f7fe ff7d 	bl	8000c80 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d302      	bcc.n	8001d98 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d11d      	bne.n	8001dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d016      	beq.n	8001dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2220      	movs	r2, #32
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc0:	f043 0220 	orr.w	r2, r3, #32
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e007      	b.n	8001de4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d1c3      	bne.n	8001d6a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e02:	d11b      	bne.n	8001e3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2220      	movs	r2, #32
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	f043 0204 	orr.w	r2, r3, #4
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e272      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8087 	beq.w	8001f76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e68:	4b92      	ldr	r3, [pc, #584]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 030c 	and.w	r3, r3, #12
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d00c      	beq.n	8001e8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e74:	4b8f      	ldr	r3, [pc, #572]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 030c 	and.w	r3, r3, #12
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d112      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x5e>
 8001e80:	4b8c      	ldr	r3, [pc, #560]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8e:	4b89      	ldr	r3, [pc, #548]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d06c      	beq.n	8001f74 <HAL_RCC_OscConfig+0x12c>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d168      	bne.n	8001f74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e24c      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eae:	d106      	bne.n	8001ebe <HAL_RCC_OscConfig+0x76>
 8001eb0:	4b80      	ldr	r3, [pc, #512]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a7f      	ldr	r2, [pc, #508]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	e02e      	b.n	8001f1c <HAL_RCC_OscConfig+0xd4>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10c      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x98>
 8001ec6:	4b7b      	ldr	r3, [pc, #492]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a7a      	ldr	r2, [pc, #488]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	4b78      	ldr	r3, [pc, #480]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a77      	ldr	r2, [pc, #476]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	e01d      	b.n	8001f1c <HAL_RCC_OscConfig+0xd4>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ee8:	d10c      	bne.n	8001f04 <HAL_RCC_OscConfig+0xbc>
 8001eea:	4b72      	ldr	r3, [pc, #456]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a71      	ldr	r2, [pc, #452]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	4b6f      	ldr	r3, [pc, #444]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a6e      	ldr	r2, [pc, #440]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	e00b      	b.n	8001f1c <HAL_RCC_OscConfig+0xd4>
 8001f04:	4b6b      	ldr	r3, [pc, #428]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a6a      	ldr	r2, [pc, #424]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	4b68      	ldr	r3, [pc, #416]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a67      	ldr	r2, [pc, #412]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d013      	beq.n	8001f4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7fe feac 	bl	8000c80 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f2c:	f7fe fea8 	bl	8000c80 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	@ 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e200      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	4b5d      	ldr	r3, [pc, #372]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0xe4>
 8001f4a:	e014      	b.n	8001f76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7fe fe98 	bl	8000c80 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f54:	f7fe fe94 	bl	8000c80 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	@ 0x64
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e1ec      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f66:	4b53      	ldr	r3, [pc, #332]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x10c>
 8001f72:	e000      	b.n	8001f76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d063      	beq.n	800204a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f82:	4b4c      	ldr	r3, [pc, #304]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00b      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f8e:	4b49      	ldr	r3, [pc, #292]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d11c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x18c>
 8001f9a:	4b46      	ldr	r3, [pc, #280]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d116      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa6:	4b43      	ldr	r3, [pc, #268]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d005      	beq.n	8001fbe <HAL_RCC_OscConfig+0x176>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d001      	beq.n	8001fbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e1c0      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbe:	4b3d      	ldr	r3, [pc, #244]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4939      	ldr	r1, [pc, #228]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd2:	e03a      	b.n	800204a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d020      	beq.n	800201e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fdc:	4b36      	ldr	r3, [pc, #216]	@ (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7fe fe4d 	bl	8000c80 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fea:	f7fe fe49 	bl	8000c80 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e1a1      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffc:	4b2d      	ldr	r3, [pc, #180]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f0      	beq.n	8001fea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002008:	4b2a      	ldr	r3, [pc, #168]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4927      	ldr	r1, [pc, #156]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8002018:	4313      	orrs	r3, r2
 800201a:	600b      	str	r3, [r1, #0]
 800201c:	e015      	b.n	800204a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800201e:	4b26      	ldr	r3, [pc, #152]	@ (80020b8 <HAL_RCC_OscConfig+0x270>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7fe fe2c 	bl	8000c80 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800202c:	f7fe fe28 	bl	8000c80 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e180      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203e:	4b1d      	ldr	r3, [pc, #116]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d03a      	beq.n	80020cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d019      	beq.n	8002092 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800205e:	4b17      	ldr	r3, [pc, #92]	@ (80020bc <HAL_RCC_OscConfig+0x274>)
 8002060:	2201      	movs	r2, #1
 8002062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002064:	f7fe fe0c 	bl	8000c80 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206c:	f7fe fe08 	bl	8000c80 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e160      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207e:	4b0d      	ldr	r3, [pc, #52]	@ (80020b4 <HAL_RCC_OscConfig+0x26c>)
 8002080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800208a:	2001      	movs	r0, #1
 800208c:	f000 face 	bl	800262c <RCC_Delay>
 8002090:	e01c      	b.n	80020cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002092:	4b0a      	ldr	r3, [pc, #40]	@ (80020bc <HAL_RCC_OscConfig+0x274>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002098:	f7fe fdf2 	bl	8000c80 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209e:	e00f      	b.n	80020c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a0:	f7fe fdee 	bl	8000c80 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d908      	bls.n	80020c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e146      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000
 80020b8:	42420000 	.word	0x42420000
 80020bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c0:	4b92      	ldr	r3, [pc, #584]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1e9      	bne.n	80020a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80a6 	beq.w	8002226 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020de:	4b8b      	ldr	r3, [pc, #556]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10d      	bne.n	8002106 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	4b88      	ldr	r3, [pc, #544]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	4a87      	ldr	r2, [pc, #540]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020f4:	61d3      	str	r3, [r2, #28]
 80020f6:	4b85      	ldr	r3, [pc, #532]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002102:	2301      	movs	r3, #1
 8002104:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002106:	4b82      	ldr	r3, [pc, #520]	@ (8002310 <HAL_RCC_OscConfig+0x4c8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d118      	bne.n	8002144 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002112:	4b7f      	ldr	r3, [pc, #508]	@ (8002310 <HAL_RCC_OscConfig+0x4c8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a7e      	ldr	r2, [pc, #504]	@ (8002310 <HAL_RCC_OscConfig+0x4c8>)
 8002118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800211c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211e:	f7fe fdaf 	bl	8000c80 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002126:	f7fe fdab 	bl	8000c80 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b64      	cmp	r3, #100	@ 0x64
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e103      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002138:	4b75      	ldr	r3, [pc, #468]	@ (8002310 <HAL_RCC_OscConfig+0x4c8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x312>
 800214c:	4b6f      	ldr	r3, [pc, #444]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	4a6e      	ldr	r2, [pc, #440]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6213      	str	r3, [r2, #32]
 8002158:	e02d      	b.n	80021b6 <HAL_RCC_OscConfig+0x36e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0x334>
 8002162:	4b6a      	ldr	r3, [pc, #424]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	4a69      	ldr	r2, [pc, #420]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	6213      	str	r3, [r2, #32]
 800216e:	4b67      	ldr	r3, [pc, #412]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4a66      	ldr	r2, [pc, #408]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002174:	f023 0304 	bic.w	r3, r3, #4
 8002178:	6213      	str	r3, [r2, #32]
 800217a:	e01c      	b.n	80021b6 <HAL_RCC_OscConfig+0x36e>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b05      	cmp	r3, #5
 8002182:	d10c      	bne.n	800219e <HAL_RCC_OscConfig+0x356>
 8002184:	4b61      	ldr	r3, [pc, #388]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4a60      	ldr	r2, [pc, #384]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	6213      	str	r3, [r2, #32]
 8002190:	4b5e      	ldr	r3, [pc, #376]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	4a5d      	ldr	r2, [pc, #372]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6213      	str	r3, [r2, #32]
 800219c:	e00b      	b.n	80021b6 <HAL_RCC_OscConfig+0x36e>
 800219e:	4b5b      	ldr	r3, [pc, #364]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4a5a      	ldr	r2, [pc, #360]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	6213      	str	r3, [r2, #32]
 80021aa:	4b58      	ldr	r3, [pc, #352]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	4a57      	ldr	r2, [pc, #348]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	f023 0304 	bic.w	r3, r3, #4
 80021b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d015      	beq.n	80021ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021be:	f7fe fd5f 	bl	8000c80 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c4:	e00a      	b.n	80021dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c6:	f7fe fd5b 	bl	8000c80 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e0b1      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021dc:	4b4b      	ldr	r3, [pc, #300]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0ee      	beq.n	80021c6 <HAL_RCC_OscConfig+0x37e>
 80021e8:	e014      	b.n	8002214 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ea:	f7fe fd49 	bl	8000c80 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f0:	e00a      	b.n	8002208 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f2:	f7fe fd45 	bl	8000c80 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002200:	4293      	cmp	r3, r2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e09b      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002208:	4b40      	ldr	r3, [pc, #256]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1ee      	bne.n	80021f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002214:	7dfb      	ldrb	r3, [r7, #23]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d105      	bne.n	8002226 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221a:	4b3c      	ldr	r3, [pc, #240]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	4a3b      	ldr	r2, [pc, #236]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002220:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002224:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 8087 	beq.w	800233e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002230:	4b36      	ldr	r3, [pc, #216]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	2b08      	cmp	r3, #8
 800223a:	d061      	beq.n	8002300 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d146      	bne.n	80022d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002244:	4b33      	ldr	r3, [pc, #204]	@ (8002314 <HAL_RCC_OscConfig+0x4cc>)
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224a:	f7fe fd19 	bl	8000c80 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002252:	f7fe fd15 	bl	8000c80 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e06d      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002264:	4b29      	ldr	r3, [pc, #164]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f0      	bne.n	8002252 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002278:	d108      	bne.n	800228c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800227a:	4b24      	ldr	r3, [pc, #144]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	4921      	ldr	r1, [pc, #132]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800228c:	4b1f      	ldr	r3, [pc, #124]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a19      	ldr	r1, [r3, #32]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229c:	430b      	orrs	r3, r1
 800229e:	491b      	ldr	r1, [pc, #108]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002314 <HAL_RCC_OscConfig+0x4cc>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022aa:	f7fe fce9 	bl	8000c80 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b2:	f7fe fce5 	bl	8000c80 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e03d      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c4:	4b11      	ldr	r3, [pc, #68]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x46a>
 80022d0:	e035      	b.n	800233e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d2:	4b10      	ldr	r3, [pc, #64]	@ (8002314 <HAL_RCC_OscConfig+0x4cc>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7fe fcd2 	bl	8000c80 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e0:	f7fe fcce 	bl	8000c80 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e026      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f2:	4b06      	ldr	r3, [pc, #24]	@ (800230c <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x498>
 80022fe:	e01e      	b.n	800233e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d107      	bne.n	8002318 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e019      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
 800230c:	40021000 	.word	0x40021000
 8002310:	40007000 	.word	0x40007000
 8002314:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002318:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <HAL_RCC_OscConfig+0x500>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	429a      	cmp	r2, r3
 800232a:	d106      	bne.n	800233a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d001      	beq.n	800233e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000

0800234c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0d0      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002360:	4b6a      	ldr	r3, [pc, #424]	@ (800250c <HAL_RCC_ClockConfig+0x1c0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d910      	bls.n	8002390 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b67      	ldr	r3, [pc, #412]	@ (800250c <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 0207 	bic.w	r2, r3, #7
 8002376:	4965      	ldr	r1, [pc, #404]	@ (800250c <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b63      	ldr	r3, [pc, #396]	@ (800250c <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0b8      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d020      	beq.n	80023de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a8:	4b59      	ldr	r3, [pc, #356]	@ (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4a58      	ldr	r2, [pc, #352]	@ (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c0:	4b53      	ldr	r3, [pc, #332]	@ (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	4a52      	ldr	r2, [pc, #328]	@ (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023cc:	4b50      	ldr	r3, [pc, #320]	@ (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	494d      	ldr	r1, [pc, #308]	@ (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d040      	beq.n	800246c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	4b47      	ldr	r3, [pc, #284]	@ (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d115      	bne.n	800242a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e07f      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240a:	4b41      	ldr	r3, [pc, #260]	@ (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e073      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241a:	4b3d      	ldr	r3, [pc, #244]	@ (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e06b      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242a:	4b39      	ldr	r3, [pc, #228]	@ (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f023 0203 	bic.w	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4936      	ldr	r1, [pc, #216]	@ (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800243c:	f7fe fc20 	bl	8000c80 <HAL_GetTick>
 8002440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	e00a      	b.n	800245a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002444:	f7fe fc1c 	bl	8000c80 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e053      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	4b2d      	ldr	r3, [pc, #180]	@ (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 020c 	and.w	r2, r3, #12
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	429a      	cmp	r2, r3
 800246a:	d1eb      	bne.n	8002444 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800246c:	4b27      	ldr	r3, [pc, #156]	@ (800250c <HAL_RCC_ClockConfig+0x1c0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d210      	bcs.n	800249c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b24      	ldr	r3, [pc, #144]	@ (800250c <HAL_RCC_ClockConfig+0x1c0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 0207 	bic.w	r2, r3, #7
 8002482:	4922      	ldr	r1, [pc, #136]	@ (800250c <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b20      	ldr	r3, [pc, #128]	@ (800250c <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e032      	b.n	8002502 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a8:	4b19      	ldr	r3, [pc, #100]	@ (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4916      	ldr	r1, [pc, #88]	@ (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d009      	beq.n	80024da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024c6:	4b12      	ldr	r3, [pc, #72]	@ (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	490e      	ldr	r1, [pc, #56]	@ (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024da:	f000 f821 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 80024de:	4602      	mov	r2, r0
 80024e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	490a      	ldr	r1, [pc, #40]	@ (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80024ec:	5ccb      	ldrb	r3, [r1, r3]
 80024ee:	fa22 f303 	lsr.w	r3, r2, r3
 80024f2:	4a09      	ldr	r2, [pc, #36]	@ (8002518 <HAL_RCC_ClockConfig+0x1cc>)
 80024f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024f6:	4b09      	ldr	r3, [pc, #36]	@ (800251c <HAL_RCC_ClockConfig+0x1d0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe fb7e 	bl	8000bfc <HAL_InitTick>

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40022000 	.word	0x40022000
 8002510:	40021000 	.word	0x40021000
 8002514:	08002b64 	.word	0x08002b64
 8002518:	20000000 	.word	0x20000000
 800251c:	20000004 	.word	0x20000004

08002520 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800253a:	4b1e      	ldr	r3, [pc, #120]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b04      	cmp	r3, #4
 8002548:	d002      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x30>
 800254a:	2b08      	cmp	r3, #8
 800254c:	d003      	beq.n	8002556 <HAL_RCC_GetSysClockFreq+0x36>
 800254e:	e027      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002550:	4b19      	ldr	r3, [pc, #100]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002552:	613b      	str	r3, [r7, #16]
      break;
 8002554:	e027      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	0c9b      	lsrs	r3, r3, #18
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	4a17      	ldr	r2, [pc, #92]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002560:	5cd3      	ldrb	r3, [r2, r3]
 8002562:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d010      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800256e:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	0c5b      	lsrs	r3, r3, #17
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	4a11      	ldr	r2, [pc, #68]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800257a:	5cd3      	ldrb	r3, [r2, r3]
 800257c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a0d      	ldr	r2, [pc, #52]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002582:	fb03 f202 	mul.w	r2, r3, r2
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	fbb2 f3f3 	udiv	r3, r2, r3
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	e004      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a0c      	ldr	r2, [pc, #48]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002594:	fb02 f303 	mul.w	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	613b      	str	r3, [r7, #16]
      break;
 800259e:	e002      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025a0:	4b05      	ldr	r3, [pc, #20]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80025a2:	613b      	str	r3, [r7, #16]
      break;
 80025a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025a6:	693b      	ldr	r3, [r7, #16]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	371c      	adds	r7, #28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	007a1200 	.word	0x007a1200
 80025bc:	0800405c 	.word	0x0800405c
 80025c0:	0800406c 	.word	0x0800406c
 80025c4:	003d0900 	.word	0x003d0900

080025c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025cc:	4b02      	ldr	r3, [pc, #8]	@ (80025d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	20000000 	.word	0x20000000

080025dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025e0:	f7ff fff2 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b05      	ldr	r3, [pc, #20]	@ (80025fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	0a1b      	lsrs	r3, r3, #8
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4903      	ldr	r1, [pc, #12]	@ (8002600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40021000 	.word	0x40021000
 8002600:	08002b74 	.word	0x08002b74

08002604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002608:	f7ff ffde 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 800260c:	4602      	mov	r2, r0
 800260e:	4b05      	ldr	r3, [pc, #20]	@ (8002624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	0adb      	lsrs	r3, r3, #11
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	4903      	ldr	r1, [pc, #12]	@ (8002628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800261a:	5ccb      	ldrb	r3, [r1, r3]
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000
 8002628:	08002b74 	.word	0x08002b74

0800262c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002634:	4b0a      	ldr	r3, [pc, #40]	@ (8002660 <RCC_Delay+0x34>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0a      	ldr	r2, [pc, #40]	@ (8002664 <RCC_Delay+0x38>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	0a5b      	lsrs	r3, r3, #9
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	fb02 f303 	mul.w	r3, r2, r3
 8002646:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002648:	bf00      	nop
  }
  while (Delay --);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1e5a      	subs	r2, r3, #1
 800264e:	60fa      	str	r2, [r7, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f9      	bne.n	8002648 <RCC_Delay+0x1c>
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr
 8002660:	20000000 	.word	0x20000000
 8002664:	10624dd3 	.word	0x10624dd3

08002668 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e042      	b.n	8002700 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fd ff5c 	bl	800054c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2224      	movs	r2, #36	@ 0x24
 8002698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f97d 	bl	80029ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	@ 0x28
 800270c:	af02      	add	r7, sp, #8
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	4613      	mov	r3, r2
 8002716:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b20      	cmp	r3, #32
 8002726:	f040 8081 	bne.w	800282c <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_UART_Receive+0x2e>
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e079      	b.n	800282e <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2222      	movs	r2, #34	@ 0x22
 8002744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800274e:	f7fe fa97 	bl	8000c80 <HAL_GetTick>
 8002752:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	88fa      	ldrh	r2, [r7, #6]
 8002758:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	88fa      	ldrh	r2, [r7, #6]
 800275e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002768:	d108      	bne.n	800277c <HAL_UART_Receive+0x74>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d104      	bne.n	800277c <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	e003      	b.n	8002784 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002780:	2300      	movs	r3, #0
 8002782:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002784:	e047      	b.n	8002816 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2200      	movs	r2, #0
 800278e:	2120      	movs	r1, #32
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f850 	bl	8002836 <UART_WaitOnFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e042      	b.n	800282e <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10c      	bne.n	80027c8 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	3302      	adds	r3, #2
 80027c4:	61bb      	str	r3, [r7, #24]
 80027c6:	e01f      	b.n	8002808 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027d0:	d007      	beq.n	80027e2 <HAL_UART_Receive+0xda>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10a      	bne.n	80027f0 <HAL_UART_Receive+0xe8>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	e008      	b.n	8002802 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3301      	adds	r3, #1
 8002806:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1b2      	bne.n	8002786 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	e000      	b.n	800282e <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800282c:	2302      	movs	r3, #2
  }
}
 800282e:	4618      	mov	r0, r3
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b086      	sub	sp, #24
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	603b      	str	r3, [r7, #0]
 8002842:	4613      	mov	r3, r2
 8002844:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002846:	e03b      	b.n	80028c0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800284e:	d037      	beq.n	80028c0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002850:	f7fe fa16 	bl	8000c80 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	6a3a      	ldr	r2, [r7, #32]
 800285c:	429a      	cmp	r2, r3
 800285e:	d302      	bcc.n	8002866 <UART_WaitOnFlagUntilTimeout+0x30>
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e03a      	b.n	80028e0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d023      	beq.n	80028c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b80      	cmp	r3, #128	@ 0x80
 800287c:	d020      	beq.n	80028c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b40      	cmp	r3, #64	@ 0x40
 8002882:	d01d      	beq.n	80028c0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b08      	cmp	r3, #8
 8002890:	d116      	bne.n	80028c0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f81d 	bl	80028e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2208      	movs	r2, #8
 80028b2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e00f      	b.n	80028e0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	4013      	ands	r3, r2
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d0b4      	beq.n	8002848 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b095      	sub	sp, #84	@ 0x54
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028fa:	e853 3f00 	ldrex	r3, [r3]
 80028fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002902:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002906:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	330c      	adds	r3, #12
 800290e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002910:	643a      	str	r2, [r7, #64]	@ 0x40
 8002912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002914:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002916:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002918:	e841 2300 	strex	r3, r2, [r1]
 800291c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800291e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1e5      	bne.n	80028f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3314      	adds	r3, #20
 800292a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	e853 3f00 	ldrex	r3, [r3]
 8002932:	61fb      	str	r3, [r7, #28]
   return(result);
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	3314      	adds	r3, #20
 8002942:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002944:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002946:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002948:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800294a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800294c:	e841 2300 	strex	r3, r2, [r1]
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1e5      	bne.n	8002924 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295c:	2b01      	cmp	r3, #1
 800295e:	d119      	bne.n	8002994 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	330c      	adds	r3, #12
 8002966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	e853 3f00 	ldrex	r3, [r3]
 800296e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f023 0310 	bic.w	r3, r3, #16
 8002976:	647b      	str	r3, [r7, #68]	@ 0x44
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	330c      	adds	r3, #12
 800297e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002980:	61ba      	str	r2, [r7, #24]
 8002982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002984:	6979      	ldr	r1, [r7, #20]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	e841 2300 	strex	r3, r2, [r1]
 800298c:	613b      	str	r3, [r7, #16]
   return(result);
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1e5      	bne.n	8002960 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029a2:	bf00      	nop
 80029a4:	3754      	adds	r7, #84	@ 0x54
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80029e6:	f023 030c 	bic.w	r3, r3, #12
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	430b      	orrs	r3, r1
 80029f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699a      	ldr	r2, [r3, #24]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ac0 <UART_SetConfig+0x114>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d103      	bne.n	8002a1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a14:	f7ff fdf6 	bl	8002604 <HAL_RCC_GetPCLK2Freq>
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	e002      	b.n	8002a22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a1c:	f7ff fdde 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 8002a20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	009a      	lsls	r2, r3, #2
 8002a2c:	441a      	add	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	4a22      	ldr	r2, [pc, #136]	@ (8002ac4 <UART_SetConfig+0x118>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	0119      	lsls	r1, r3, #4
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	009a      	lsls	r2, r3, #2
 8002a4c:	441a      	add	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a58:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac4 <UART_SetConfig+0x118>)
 8002a5a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2064      	movs	r0, #100	@ 0x64
 8002a62:	fb00 f303 	mul.w	r3, r0, r3
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	3332      	adds	r3, #50	@ 0x32
 8002a6c:	4a15      	ldr	r2, [pc, #84]	@ (8002ac4 <UART_SetConfig+0x118>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a78:	4419      	add	r1, r3
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	009a      	lsls	r2, r3, #2
 8002a84:	441a      	add	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac4 <UART_SetConfig+0x118>)
 8002a92:	fba3 0302 	umull	r0, r3, r3, r2
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	2064      	movs	r0, #100	@ 0x64
 8002a9a:	fb00 f303 	mul.w	r3, r0, r3
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	3332      	adds	r3, #50	@ 0x32
 8002aa4:	4a07      	ldr	r2, [pc, #28]	@ (8002ac4 <UART_SetConfig+0x118>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	f003 020f 	and.w	r2, r3, #15
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	440a      	add	r2, r1
 8002ab6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40013800 	.word	0x40013800
 8002ac4:	51eb851f 	.word	0x51eb851f

08002ac8 <memset>:
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4402      	add	r2, r0
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d100      	bne.n	8002ad2 <memset+0xa>
 8002ad0:	4770      	bx	lr
 8002ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ad6:	e7f9      	b.n	8002acc <memset+0x4>

08002ad8 <__libc_init_array>:
 8002ad8:	b570      	push	{r4, r5, r6, lr}
 8002ada:	2600      	movs	r6, #0
 8002adc:	4d0c      	ldr	r5, [pc, #48]	@ (8002b10 <__libc_init_array+0x38>)
 8002ade:	4c0d      	ldr	r4, [pc, #52]	@ (8002b14 <__libc_init_array+0x3c>)
 8002ae0:	1b64      	subs	r4, r4, r5
 8002ae2:	10a4      	asrs	r4, r4, #2
 8002ae4:	42a6      	cmp	r6, r4
 8002ae6:	d109      	bne.n	8002afc <__libc_init_array+0x24>
 8002ae8:	f000 f81a 	bl	8002b20 <_init>
 8002aec:	2600      	movs	r6, #0
 8002aee:	4d0a      	ldr	r5, [pc, #40]	@ (8002b18 <__libc_init_array+0x40>)
 8002af0:	4c0a      	ldr	r4, [pc, #40]	@ (8002b1c <__libc_init_array+0x44>)
 8002af2:	1b64      	subs	r4, r4, r5
 8002af4:	10a4      	asrs	r4, r4, #2
 8002af6:	42a6      	cmp	r6, r4
 8002af8:	d105      	bne.n	8002b06 <__libc_init_array+0x2e>
 8002afa:	bd70      	pop	{r4, r5, r6, pc}
 8002afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b00:	4798      	blx	r3
 8002b02:	3601      	adds	r6, #1
 8002b04:	e7ee      	b.n	8002ae4 <__libc_init_array+0xc>
 8002b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b0a:	4798      	blx	r3
 8002b0c:	3601      	adds	r6, #1
 8002b0e:	e7f2      	b.n	8002af6 <__libc_init_array+0x1e>
 8002b10:	08004070 	.word	0x08004070
 8002b14:	08004070 	.word	0x08004070
 8002b18:	08004070 	.word	0x08004070
 8002b1c:	08004074 	.word	0x08004074

08002b20 <_init>:
 8002b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b22:	bf00      	nop
 8002b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b26:	bc08      	pop	{r3}
 8002b28:	469e      	mov	lr, r3
 8002b2a:	4770      	bx	lr

08002b2c <_fini>:
 8002b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2e:	bf00      	nop
 8002b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b32:	bc08      	pop	{r3}
 8002b34:	469e      	mov	lr, r3
 8002b36:	4770      	bx	lr
